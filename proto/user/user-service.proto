syntax = "proto3";

package serveralpha.user;

import "common/common.proto";

option go_package = "github.com/wwi21seb-projekt/alpha-shared/proto/user;serveralpha";

// GUIDELINES
// https://cloud.google.com/apis/design/standard_methods
// https://cloud.google.com/apis/design/custom_methods
// https://cloud.google.com/apis/design/naming_convention#method_names
// "The method names should follow the naming convention of VerbNoun in upper camel case, where the noun is typically the resource type."

// ------------------ Services ------------------ //


service AuthenticationService{ // https://cloud.google.com/apis/design/naming_convention#interface_names
  rpc RegisterUser(RegisterUserRequest) returns (User);
  rpc ActivateUser(ActivateUserRequest) returns (User);
  rpc LoginUser(LoginUserRequest) returns (User);
  rpc UpdatePassword(ChangePasswordRequest) returns (common.Empty);
}

service UserService{
  rpc GetUser(GetUserRequest) returns (User);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc SearchUsers(SearchUsersRequest) returns (ListUsersResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

service SubscriptionService{
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);
  rpc CreateSubscription(CreateSubscriptionRequest) returns (Subscription);
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (common.Empty);
}

// ------------------ Enums ------------------ //

enum SubscriptionType{
  SUBSCRIPTION_TYPE_FOLLOWER = 0; // default by setting to 0
  SUBSCRIPTION_TYPE_FOLLOWING = 1;
}

// ------------------ Messages ------------------ //

message User{
  string username = 1;
  string nickname = 2;
  string email = 3;
  string profile_picture_url = 4;
}

message SearchUsersResponse{
  repeated User profiles = 1;
  common.Pagination pagination = 2;
}

message ListUsersResponse{
  repeated User profiles = 1;
}

message Subscription{
  string follower_subscription_id = 1; // populated when the other user follows the current user
  string followed_subscription_id = 2; // populated when the current user follows the other user
  string username = 3; // the username of the other user
  string nickname = 4; // the nickname of the other user
  string profile_picture_url = 5; // the profile picture of the other user
}

message ListSubscriptionsResponse{
  repeated Subscription subscriptions = 1;
  common.Pagination pagination = 2;
}

// ------------------ Requests ------------------ //

message ListUsersRequest{
  repeated string user_ids = 1;
}

message RegisterUserRequest{
  string username = 1;
  string password = 2;
  string nickname = 3;
  string email = 4;
}

message ActivateUserRequest{
  string token = 1;
}

message LoginUserRequest{
  string username = 1;
  string password = 2;
}

message GetUserRequest{
  string username = 1;
}

message SearchUsersRequest{
  common.PaginationRequest pagination = 1;
  string query = 2;
}

message UpdateUserRequest{
  string nickname = 1;
  string status = 2;
}

message ChangePasswordRequest{
  string old_password = 1;
  string new_password = 2;
}

message ListSubscriptionsRequest{
  common.PaginationRequest pagination = 1;
  SubscriptionType subscription_type = 2;
  string username = 3;
}

message CreateSubscriptionRequest{
  string followed_username = 1;
}

message DeleteSubscriptionRequest{
  string subscription_id = 1;
}
