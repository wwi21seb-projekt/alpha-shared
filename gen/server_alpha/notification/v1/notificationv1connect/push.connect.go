// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/notification/v1/push.proto

package notificationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/notification/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PushServiceName is the fully-qualified name of the PushService service.
	PushServiceName = "server_alpha.notification.v1.PushService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PushServiceGetPublicKeyProcedure is the fully-qualified name of the PushService's GetPublicKey
	// RPC.
	PushServiceGetPublicKeyProcedure = "/server_alpha.notification.v1.PushService/GetPublicKey"
	// PushServiceCreatePushSubscriptionProcedure is the fully-qualified name of the PushService's
	// CreatePushSubscription RPC.
	PushServiceCreatePushSubscriptionProcedure = "/server_alpha.notification.v1.PushService/CreatePushSubscription"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pushServiceServiceDescriptor                      = v1.File_server_alpha_notification_v1_push_proto.Services().ByName("PushService")
	pushServiceGetPublicKeyMethodDescriptor           = pushServiceServiceDescriptor.Methods().ByName("GetPublicKey")
	pushServiceCreatePushSubscriptionMethodDescriptor = pushServiceServiceDescriptor.Methods().ByName("CreatePushSubscription")
)

// PushServiceClient is a client for the server_alpha.notification.v1.PushService service.
type PushServiceClient interface {
	GetPublicKey(context.Context, *connect.Request[v1.GetPublicKeyRequest]) (*connect.Response[v1.GetPublicKeyResponse], error)
	CreatePushSubscription(context.Context, *connect.Request[v1.CreatePushSubscriptionRequest]) (*connect.Response[v1.CreatePushSubscriptionResponse], error)
}

// NewPushServiceClient constructs a client for the server_alpha.notification.v1.PushService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPushServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PushServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pushServiceClient{
		getPublicKey: connect.NewClient[v1.GetPublicKeyRequest, v1.GetPublicKeyResponse](
			httpClient,
			baseURL+PushServiceGetPublicKeyProcedure,
			connect.WithSchema(pushServiceGetPublicKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPushSubscription: connect.NewClient[v1.CreatePushSubscriptionRequest, v1.CreatePushSubscriptionResponse](
			httpClient,
			baseURL+PushServiceCreatePushSubscriptionProcedure,
			connect.WithSchema(pushServiceCreatePushSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pushServiceClient implements PushServiceClient.
type pushServiceClient struct {
	getPublicKey           *connect.Client[v1.GetPublicKeyRequest, v1.GetPublicKeyResponse]
	createPushSubscription *connect.Client[v1.CreatePushSubscriptionRequest, v1.CreatePushSubscriptionResponse]
}

// GetPublicKey calls server_alpha.notification.v1.PushService.GetPublicKey.
func (c *pushServiceClient) GetPublicKey(ctx context.Context, req *connect.Request[v1.GetPublicKeyRequest]) (*connect.Response[v1.GetPublicKeyResponse], error) {
	return c.getPublicKey.CallUnary(ctx, req)
}

// CreatePushSubscription calls server_alpha.notification.v1.PushService.CreatePushSubscription.
func (c *pushServiceClient) CreatePushSubscription(ctx context.Context, req *connect.Request[v1.CreatePushSubscriptionRequest]) (*connect.Response[v1.CreatePushSubscriptionResponse], error) {
	return c.createPushSubscription.CallUnary(ctx, req)
}

// PushServiceHandler is an implementation of the server_alpha.notification.v1.PushService service.
type PushServiceHandler interface {
	GetPublicKey(context.Context, *connect.Request[v1.GetPublicKeyRequest]) (*connect.Response[v1.GetPublicKeyResponse], error)
	CreatePushSubscription(context.Context, *connect.Request[v1.CreatePushSubscriptionRequest]) (*connect.Response[v1.CreatePushSubscriptionResponse], error)
}

// NewPushServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPushServiceHandler(svc PushServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pushServiceGetPublicKeyHandler := connect.NewUnaryHandler(
		PushServiceGetPublicKeyProcedure,
		svc.GetPublicKey,
		connect.WithSchema(pushServiceGetPublicKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pushServiceCreatePushSubscriptionHandler := connect.NewUnaryHandler(
		PushServiceCreatePushSubscriptionProcedure,
		svc.CreatePushSubscription,
		connect.WithSchema(pushServiceCreatePushSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.notification.v1.PushService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PushServiceGetPublicKeyProcedure:
			pushServiceGetPublicKeyHandler.ServeHTTP(w, r)
		case PushServiceCreatePushSubscriptionProcedure:
			pushServiceCreatePushSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPushServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPushServiceHandler struct{}

func (UnimplementedPushServiceHandler) GetPublicKey(context.Context, *connect.Request[v1.GetPublicKeyRequest]) (*connect.Response[v1.GetPublicKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.notification.v1.PushService.GetPublicKey is not implemented"))
}

func (UnimplementedPushServiceHandler) CreatePushSubscription(context.Context, *connect.Request[v1.CreatePushSubscriptionRequest]) (*connect.Response[v1.CreatePushSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.notification.v1.PushService.CreatePushSubscription is not implemented"))
}
