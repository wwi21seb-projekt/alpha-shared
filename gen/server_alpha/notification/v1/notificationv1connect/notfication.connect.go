// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/notification/v1/notfication.proto

package notificationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/notification/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "server_alpha.notification.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceListNotificationsProcedure is the fully-qualified name of the
	// NotificationService's ListNotifications RPC.
	NotificationServiceListNotificationsProcedure = "/server_alpha.notification.v1.NotificationService/ListNotifications"
	// NotificationServiceDeleteNotificationProcedure is the fully-qualified name of the
	// NotificationService's DeleteNotification RPC.
	NotificationServiceDeleteNotificationProcedure = "/server_alpha.notification.v1.NotificationService/DeleteNotification"
	// NotificationServiceSendNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendNotification RPC.
	NotificationServiceSendNotificationProcedure = "/server_alpha.notification.v1.NotificationService/SendNotification"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	notificationServiceServiceDescriptor                  = v1.File_server_alpha_notification_v1_notfication_proto.Services().ByName("NotificationService")
	notificationServiceListNotificationsMethodDescriptor  = notificationServiceServiceDescriptor.Methods().ByName("ListNotifications")
	notificationServiceDeleteNotificationMethodDescriptor = notificationServiceServiceDescriptor.Methods().ByName("DeleteNotification")
	notificationServiceSendNotificationMethodDescriptor   = notificationServiceServiceDescriptor.Methods().ByName("SendNotification")
)

// NotificationServiceClient is a client for the server_alpha.notification.v1.NotificationService
// service.
type NotificationServiceClient interface {
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error)
	SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// server_alpha.notification.v1.NotificationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		listNotifications: connect.NewClient[v1.ListNotificationsRequest, v1.ListNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationsProcedure,
			connect.WithSchema(notificationServiceListNotificationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNotification: connect.NewClient[v1.DeleteNotificationRequest, v1.DeleteNotificationResponse](
			httpClient,
			baseURL+NotificationServiceDeleteNotificationProcedure,
			connect.WithSchema(notificationServiceDeleteNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendNotification: connect.NewClient[v1.SendNotificationRequest, v1.SendNotificationResponse](
			httpClient,
			baseURL+NotificationServiceSendNotificationProcedure,
			connect.WithSchema(notificationServiceSendNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	listNotifications  *connect.Client[v1.ListNotificationsRequest, v1.ListNotificationsResponse]
	deleteNotification *connect.Client[v1.DeleteNotificationRequest, v1.DeleteNotificationResponse]
	sendNotification   *connect.Client[v1.SendNotificationRequest, v1.SendNotificationResponse]
}

// ListNotifications calls server_alpha.notification.v1.NotificationService.ListNotifications.
func (c *notificationServiceClient) ListNotifications(ctx context.Context, req *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return c.listNotifications.CallUnary(ctx, req)
}

// DeleteNotification calls server_alpha.notification.v1.NotificationService.DeleteNotification.
func (c *notificationServiceClient) DeleteNotification(ctx context.Context, req *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error) {
	return c.deleteNotification.CallUnary(ctx, req)
}

// SendNotification calls server_alpha.notification.v1.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the
// server_alpha.notification.v1.NotificationService service.
type NotificationServiceHandler interface {
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error)
	SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceListNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationsProcedure,
		svc.ListNotifications,
		connect.WithSchema(notificationServiceListNotificationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceDeleteNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceDeleteNotificationProcedure,
		svc.DeleteNotification,
		connect.WithSchema(notificationServiceDeleteNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSendNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendNotificationProcedure,
		svc.SendNotification,
		connect.WithSchema(notificationServiceSendNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.notification.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceListNotificationsProcedure:
			notificationServiceListNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceDeleteNotificationProcedure:
			notificationServiceDeleteNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceSendNotificationProcedure:
			notificationServiceSendNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.notification.v1.NotificationService.ListNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.notification.v1.NotificationService.DeleteNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.notification.v1.NotificationService.SendNotification is not implemented"))
}
