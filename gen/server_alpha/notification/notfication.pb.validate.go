// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server_alpha/notification/notfication.proto

package notification

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PublicKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublicKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKeyResponseMultiError, or nil if none found.
func (m *PublicKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return PublicKeyResponseMultiError(errors)
	}

	return nil
}

// PublicKeyResponseMultiError is an error wrapping multiple validation errors
// returned by PublicKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type PublicKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyResponseMultiError) AllErrors() []error { return m }

// PublicKeyResponseValidationError is the validation error returned by
// PublicKeyResponse.Validate if the designated constraints aren't met.
type PublicKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyResponseValidationError) ErrorName() string {
	return "PublicKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyResponseValidationError{}

// Validate checks the field values on CreatePushSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePushSubscriptionRequestMultiError, or nil if none found.
func (m *CreatePushSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for P256Dh

	// no validation rules for Auth

	// no validation rules for Type

	// no validation rules for Token

	// no validation rules for ExpirationTime

	if len(errors) > 0 {
		return CreatePushSubscriptionRequestMultiError(errors)
	}

	return nil
}

// CreatePushSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePushSubscriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePushSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushSubscriptionRequestMultiError) AllErrors() []error { return m }

// CreatePushSubscriptionRequestValidationError is the validation error
// returned by CreatePushSubscriptionRequest.Validate if the designated
// constraints aren't met.
type CreatePushSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushSubscriptionRequestValidationError) ErrorName() string {
	return "CreatePushSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushSubscriptionRequestValidationError{}

// Validate checks the field values on CreatePushSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePushSubscriptionResponseMultiError, or nil if none found.
func (m *CreatePushSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionId

	if len(errors) > 0 {
		return CreatePushSubscriptionResponseMultiError(errors)
	}

	return nil
}

// CreatePushSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePushSubscriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePushSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushSubscriptionResponseMultiError) AllErrors() []error { return m }

// CreatePushSubscriptionResponseValidationError is the validation error
// returned by CreatePushSubscriptionResponse.Validate if the designated
// constraints aren't met.
type CreatePushSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushSubscriptionResponseValidationError) ErrorName() string {
	return "CreatePushSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushSubscriptionResponseValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	// no validation rules for Timestamp

	// no validation rules for NotficationType

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on GetNotificationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationsResponseMultiError, or nil if none found.
func (m *GetNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotificationsResponseValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNotificationsResponseMultiError(errors)
	}

	return nil
}

// GetNotificationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotificationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationsResponseMultiError) AllErrors() []error { return m }

// GetNotificationsResponseValidationError is the validation error returned by
// GetNotificationsResponse.Validate if the designated constraints aren't met.
type GetNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationsResponseValidationError) ErrorName() string {
	return "GetNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationsResponseValidationError{}

// Validate checks the field values on DeleteNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotificationRequestMultiError, or nil if none found.
func (m *DeleteNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	if len(errors) > 0 {
		return DeleteNotificationRequestMultiError(errors)
	}

	return nil
}

// DeleteNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNotificationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotificationRequestMultiError) AllErrors() []error { return m }

// DeleteNotificationRequestValidationError is the validation error returned by
// DeleteNotificationRequest.Validate if the designated constraints aren't met.
type DeleteNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationRequestValidationError) ErrorName() string {
	return "DeleteNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationRequestValidationError{}

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationType

	// no validation rules for Sender

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}
