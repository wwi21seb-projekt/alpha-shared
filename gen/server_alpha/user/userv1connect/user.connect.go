// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/user/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/user"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "server_alpha.user.v1.AuthenticationService"
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "server_alpha.user.v1.UserService"
	// SubscriptionServiceName is the fully-qualified name of the SubscriptionService service.
	SubscriptionServiceName = "server_alpha.user.v1.SubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceRegisterUserProcedure is the fully-qualified name of the
	// AuthenticationService's RegisterUser RPC.
	AuthenticationServiceRegisterUserProcedure = "/server_alpha.user.v1.AuthenticationService/RegisterUser"
	// AuthenticationServiceResendActivationEmailProcedure is the fully-qualified name of the
	// AuthenticationService's ResendActivationEmail RPC.
	AuthenticationServiceResendActivationEmailProcedure = "/server_alpha.user.v1.AuthenticationService/ResendActivationEmail"
	// AuthenticationServiceActivateUserProcedure is the fully-qualified name of the
	// AuthenticationService's ActivateUser RPC.
	AuthenticationServiceActivateUserProcedure = "/server_alpha.user.v1.AuthenticationService/ActivateUser"
	// AuthenticationServiceLoginUserProcedure is the fully-qualified name of the
	// AuthenticationService's LoginUser RPC.
	AuthenticationServiceLoginUserProcedure = "/server_alpha.user.v1.AuthenticationService/LoginUser"
	// AuthenticationServiceUpdatePasswordProcedure is the fully-qualified name of the
	// AuthenticationService's UpdatePassword RPC.
	AuthenticationServiceUpdatePasswordProcedure = "/server_alpha.user.v1.AuthenticationService/UpdatePassword"
	// AuthenticationServiceResetPasswordProcedure is the fully-qualified name of the
	// AuthenticationService's ResetPassword RPC.
	AuthenticationServiceResetPasswordProcedure = "/server_alpha.user.v1.AuthenticationService/ResetPassword"
	// AuthenticationServiceSetPasswordProcedure is the fully-qualified name of the
	// AuthenticationService's SetPassword RPC.
	AuthenticationServiceSetPasswordProcedure = "/server_alpha.user.v1.AuthenticationService/SetPassword"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/server_alpha.user.v1.UserService/GetUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/server_alpha.user.v1.UserService/UpdateUser"
	// UserServiceSearchUsersProcedure is the fully-qualified name of the UserService's SearchUsers RPC.
	UserServiceSearchUsersProcedure = "/server_alpha.user.v1.UserService/SearchUsers"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/server_alpha.user.v1.UserService/ListUsers"
	// SubscriptionServiceListSubscriptionsProcedure is the fully-qualified name of the
	// SubscriptionService's ListSubscriptions RPC.
	SubscriptionServiceListSubscriptionsProcedure = "/server_alpha.user.v1.SubscriptionService/ListSubscriptions"
	// SubscriptionServiceCreateSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's CreateSubscription RPC.
	SubscriptionServiceCreateSubscriptionProcedure = "/server_alpha.user.v1.SubscriptionService/CreateSubscription"
	// SubscriptionServiceDeleteSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's DeleteSubscription RPC.
	SubscriptionServiceDeleteSubscriptionProcedure = "/server_alpha.user.v1.SubscriptionService/DeleteSubscription"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authenticationServiceServiceDescriptor                     = user.File_server_alpha_user_user_proto.Services().ByName("AuthenticationService")
	authenticationServiceRegisterUserMethodDescriptor          = authenticationServiceServiceDescriptor.Methods().ByName("RegisterUser")
	authenticationServiceResendActivationEmailMethodDescriptor = authenticationServiceServiceDescriptor.Methods().ByName("ResendActivationEmail")
	authenticationServiceActivateUserMethodDescriptor          = authenticationServiceServiceDescriptor.Methods().ByName("ActivateUser")
	authenticationServiceLoginUserMethodDescriptor             = authenticationServiceServiceDescriptor.Methods().ByName("LoginUser")
	authenticationServiceUpdatePasswordMethodDescriptor        = authenticationServiceServiceDescriptor.Methods().ByName("UpdatePassword")
	authenticationServiceResetPasswordMethodDescriptor         = authenticationServiceServiceDescriptor.Methods().ByName("ResetPassword")
	authenticationServiceSetPasswordMethodDescriptor           = authenticationServiceServiceDescriptor.Methods().ByName("SetPassword")
	userServiceServiceDescriptor                               = user.File_server_alpha_user_user_proto.Services().ByName("UserService")
	userServiceGetUserMethodDescriptor                         = userServiceServiceDescriptor.Methods().ByName("GetUser")
	userServiceUpdateUserMethodDescriptor                      = userServiceServiceDescriptor.Methods().ByName("UpdateUser")
	userServiceSearchUsersMethodDescriptor                     = userServiceServiceDescriptor.Methods().ByName("SearchUsers")
	userServiceListUsersMethodDescriptor                       = userServiceServiceDescriptor.Methods().ByName("ListUsers")
	subscriptionServiceServiceDescriptor                       = user.File_server_alpha_user_user_proto.Services().ByName("SubscriptionService")
	subscriptionServiceListSubscriptionsMethodDescriptor       = subscriptionServiceServiceDescriptor.Methods().ByName("ListSubscriptions")
	subscriptionServiceCreateSubscriptionMethodDescriptor      = subscriptionServiceServiceDescriptor.Methods().ByName("CreateSubscription")
	subscriptionServiceDeleteSubscriptionMethodDescriptor      = subscriptionServiceServiceDescriptor.Methods().ByName("DeleteSubscription")
)

// AuthenticationServiceClient is a client for the server_alpha.user.v1.AuthenticationService
// service.
type AuthenticationServiceClient interface {
	RegisterUser(context.Context, *connect.Request[user.RegisterUserRequest]) (*connect.Response[user.RegisterUserResponse], error)
	ResendActivationEmail(context.Context, *connect.Request[user.ResendActivationEmailRequest]) (*connect.Response[user.ResendActivationEmailResponse], error)
	ActivateUser(context.Context, *connect.Request[user.ActivateUserRequest]) (*connect.Response[user.ActivateUserResponse], error)
	LoginUser(context.Context, *connect.Request[user.LoginUserRequest]) (*connect.Response[user.LoginUserResponse], error)
	UpdatePassword(context.Context, *connect.Request[user.UpdatePasswordRequest]) (*connect.Response[user.UpdatePasswordResponse], error)
	ResetPassword(context.Context, *connect.Request[user.ResetPasswordRequest]) (*connect.Response[user.ResetPasswordResponse], error)
	SetPassword(context.Context, *connect.Request[user.SetPasswordRequest]) (*connect.Response[user.SetPasswordResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the
// server_alpha.user.v1.AuthenticationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationServiceClient{
		registerUser: connect.NewClient[user.RegisterUserRequest, user.RegisterUserResponse](
			httpClient,
			baseURL+AuthenticationServiceRegisterUserProcedure,
			connect.WithSchema(authenticationServiceRegisterUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resendActivationEmail: connect.NewClient[user.ResendActivationEmailRequest, user.ResendActivationEmailResponse](
			httpClient,
			baseURL+AuthenticationServiceResendActivationEmailProcedure,
			connect.WithSchema(authenticationServiceResendActivationEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		activateUser: connect.NewClient[user.ActivateUserRequest, user.ActivateUserResponse](
			httpClient,
			baseURL+AuthenticationServiceActivateUserProcedure,
			connect.WithSchema(authenticationServiceActivateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		loginUser: connect.NewClient[user.LoginUserRequest, user.LoginUserResponse](
			httpClient,
			baseURL+AuthenticationServiceLoginUserProcedure,
			connect.WithSchema(authenticationServiceLoginUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePassword: connect.NewClient[user.UpdatePasswordRequest, user.UpdatePasswordResponse](
			httpClient,
			baseURL+AuthenticationServiceUpdatePasswordProcedure,
			connect.WithSchema(authenticationServiceUpdatePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[user.ResetPasswordRequest, user.ResetPasswordResponse](
			httpClient,
			baseURL+AuthenticationServiceResetPasswordProcedure,
			connect.WithSchema(authenticationServiceResetPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPassword: connect.NewClient[user.SetPasswordRequest, user.SetPasswordResponse](
			httpClient,
			baseURL+AuthenticationServiceSetPasswordProcedure,
			connect.WithSchema(authenticationServiceSetPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	registerUser          *connect.Client[user.RegisterUserRequest, user.RegisterUserResponse]
	resendActivationEmail *connect.Client[user.ResendActivationEmailRequest, user.ResendActivationEmailResponse]
	activateUser          *connect.Client[user.ActivateUserRequest, user.ActivateUserResponse]
	loginUser             *connect.Client[user.LoginUserRequest, user.LoginUserResponse]
	updatePassword        *connect.Client[user.UpdatePasswordRequest, user.UpdatePasswordResponse]
	resetPassword         *connect.Client[user.ResetPasswordRequest, user.ResetPasswordResponse]
	setPassword           *connect.Client[user.SetPasswordRequest, user.SetPasswordResponse]
}

// RegisterUser calls server_alpha.user.v1.AuthenticationService.RegisterUser.
func (c *authenticationServiceClient) RegisterUser(ctx context.Context, req *connect.Request[user.RegisterUserRequest]) (*connect.Response[user.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// ResendActivationEmail calls server_alpha.user.v1.AuthenticationService.ResendActivationEmail.
func (c *authenticationServiceClient) ResendActivationEmail(ctx context.Context, req *connect.Request[user.ResendActivationEmailRequest]) (*connect.Response[user.ResendActivationEmailResponse], error) {
	return c.resendActivationEmail.CallUnary(ctx, req)
}

// ActivateUser calls server_alpha.user.v1.AuthenticationService.ActivateUser.
func (c *authenticationServiceClient) ActivateUser(ctx context.Context, req *connect.Request[user.ActivateUserRequest]) (*connect.Response[user.ActivateUserResponse], error) {
	return c.activateUser.CallUnary(ctx, req)
}

// LoginUser calls server_alpha.user.v1.AuthenticationService.LoginUser.
func (c *authenticationServiceClient) LoginUser(ctx context.Context, req *connect.Request[user.LoginUserRequest]) (*connect.Response[user.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// UpdatePassword calls server_alpha.user.v1.AuthenticationService.UpdatePassword.
func (c *authenticationServiceClient) UpdatePassword(ctx context.Context, req *connect.Request[user.UpdatePasswordRequest]) (*connect.Response[user.UpdatePasswordResponse], error) {
	return c.updatePassword.CallUnary(ctx, req)
}

// ResetPassword calls server_alpha.user.v1.AuthenticationService.ResetPassword.
func (c *authenticationServiceClient) ResetPassword(ctx context.Context, req *connect.Request[user.ResetPasswordRequest]) (*connect.Response[user.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// SetPassword calls server_alpha.user.v1.AuthenticationService.SetPassword.
func (c *authenticationServiceClient) SetPassword(ctx context.Context, req *connect.Request[user.SetPasswordRequest]) (*connect.Response[user.SetPasswordResponse], error) {
	return c.setPassword.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the
// server_alpha.user.v1.AuthenticationService service.
type AuthenticationServiceHandler interface {
	RegisterUser(context.Context, *connect.Request[user.RegisterUserRequest]) (*connect.Response[user.RegisterUserResponse], error)
	ResendActivationEmail(context.Context, *connect.Request[user.ResendActivationEmailRequest]) (*connect.Response[user.ResendActivationEmailResponse], error)
	ActivateUser(context.Context, *connect.Request[user.ActivateUserRequest]) (*connect.Response[user.ActivateUserResponse], error)
	LoginUser(context.Context, *connect.Request[user.LoginUserRequest]) (*connect.Response[user.LoginUserResponse], error)
	UpdatePassword(context.Context, *connect.Request[user.UpdatePasswordRequest]) (*connect.Response[user.UpdatePasswordResponse], error)
	ResetPassword(context.Context, *connect.Request[user.ResetPasswordRequest]) (*connect.Response[user.ResetPasswordResponse], error)
	SetPassword(context.Context, *connect.Request[user.SetPasswordRequest]) (*connect.Response[user.SetPasswordResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceRegisterUserHandler := connect.NewUnaryHandler(
		AuthenticationServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(authenticationServiceRegisterUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceResendActivationEmailHandler := connect.NewUnaryHandler(
		AuthenticationServiceResendActivationEmailProcedure,
		svc.ResendActivationEmail,
		connect.WithSchema(authenticationServiceResendActivationEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceActivateUserHandler := connect.NewUnaryHandler(
		AuthenticationServiceActivateUserProcedure,
		svc.ActivateUser,
		connect.WithSchema(authenticationServiceActivateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceLoginUserHandler := connect.NewUnaryHandler(
		AuthenticationServiceLoginUserProcedure,
		svc.LoginUser,
		connect.WithSchema(authenticationServiceLoginUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceUpdatePasswordHandler := connect.NewUnaryHandler(
		AuthenticationServiceUpdatePasswordProcedure,
		svc.UpdatePassword,
		connect.WithSchema(authenticationServiceUpdatePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceResetPasswordHandler := connect.NewUnaryHandler(
		AuthenticationServiceResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(authenticationServiceResetPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceSetPasswordHandler := connect.NewUnaryHandler(
		AuthenticationServiceSetPasswordProcedure,
		svc.SetPassword,
		connect.WithSchema(authenticationServiceSetPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.user.v1.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceRegisterUserProcedure:
			authenticationServiceRegisterUserHandler.ServeHTTP(w, r)
		case AuthenticationServiceResendActivationEmailProcedure:
			authenticationServiceResendActivationEmailHandler.ServeHTTP(w, r)
		case AuthenticationServiceActivateUserProcedure:
			authenticationServiceActivateUserHandler.ServeHTTP(w, r)
		case AuthenticationServiceLoginUserProcedure:
			authenticationServiceLoginUserHandler.ServeHTTP(w, r)
		case AuthenticationServiceUpdatePasswordProcedure:
			authenticationServiceUpdatePasswordHandler.ServeHTTP(w, r)
		case AuthenticationServiceResetPasswordProcedure:
			authenticationServiceResetPasswordHandler.ServeHTTP(w, r)
		case AuthenticationServiceSetPasswordProcedure:
			authenticationServiceSetPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) RegisterUser(context.Context, *connect.Request[user.RegisterUserRequest]) (*connect.Response[user.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.RegisterUser is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ResendActivationEmail(context.Context, *connect.Request[user.ResendActivationEmailRequest]) (*connect.Response[user.ResendActivationEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.ResendActivationEmail is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ActivateUser(context.Context, *connect.Request[user.ActivateUserRequest]) (*connect.Response[user.ActivateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.ActivateUser is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) LoginUser(context.Context, *connect.Request[user.LoginUserRequest]) (*connect.Response[user.LoginUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.LoginUser is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) UpdatePassword(context.Context, *connect.Request[user.UpdatePasswordRequest]) (*connect.Response[user.UpdatePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.UpdatePassword is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ResetPassword(context.Context, *connect.Request[user.ResetPasswordRequest]) (*connect.Response[user.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.ResetPassword is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) SetPassword(context.Context, *connect.Request[user.SetPasswordRequest]) (*connect.Response[user.SetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.AuthenticationService.SetPassword is not implemented"))
}

// UserServiceClient is a client for the server_alpha.user.v1.UserService service.
type UserServiceClient interface {
	GetUser(context.Context, *connect.Request[user.GetUserRequest]) (*connect.Response[user.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[user.UpdateUserRequest]) (*connect.Response[user.UpdateUserResponse], error)
	SearchUsers(context.Context, *connect.Request[user.SearchUsersRequest]) (*connect.Response[user.SearchUsersResponse], error)
	ListUsers(context.Context, *connect.Request[user.ListUsersRequest]) (*connect.Response[user.ListUsersResponse], error)
}

// NewUserServiceClient constructs a client for the server_alpha.user.v1.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getUser: connect.NewClient[user.GetUserRequest, user.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[user.UpdateUserRequest, user.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchUsers: connect.NewClient[user.SearchUsersRequest, user.SearchUsersResponse](
			httpClient,
			baseURL+UserServiceSearchUsersProcedure,
			connect.WithSchema(userServiceSearchUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[user.ListUsersRequest, user.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUser     *connect.Client[user.GetUserRequest, user.GetUserResponse]
	updateUser  *connect.Client[user.UpdateUserRequest, user.UpdateUserResponse]
	searchUsers *connect.Client[user.SearchUsersRequest, user.SearchUsersResponse]
	listUsers   *connect.Client[user.ListUsersRequest, user.ListUsersResponse]
}

// GetUser calls server_alpha.user.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[user.GetUserRequest]) (*connect.Response[user.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls server_alpha.user.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[user.UpdateUserRequest]) (*connect.Response[user.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// SearchUsers calls server_alpha.user.v1.UserService.SearchUsers.
func (c *userServiceClient) SearchUsers(ctx context.Context, req *connect.Request[user.SearchUsersRequest]) (*connect.Response[user.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// ListUsers calls server_alpha.user.v1.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[user.ListUsersRequest]) (*connect.Response[user.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the server_alpha.user.v1.UserService service.
type UserServiceHandler interface {
	GetUser(context.Context, *connect.Request[user.GetUserRequest]) (*connect.Response[user.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[user.UpdateUserRequest]) (*connect.Response[user.UpdateUserResponse], error)
	SearchUsers(context.Context, *connect.Request[user.SearchUsersRequest]) (*connect.Response[user.SearchUsersResponse], error)
	ListUsers(context.Context, *connect.Request[user.ListUsersRequest]) (*connect.Response[user.ListUsersResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchUsersHandler := connect.NewUnaryHandler(
		UserServiceSearchUsersProcedure,
		svc.SearchUsers,
		connect.WithSchema(userServiceSearchUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceSearchUsersProcedure:
			userServiceSearchUsersHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[user.GetUserRequest]) (*connect.Response[user.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[user.UpdateUserRequest]) (*connect.Response[user.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) SearchUsers(context.Context, *connect.Request[user.SearchUsersRequest]) (*connect.Response[user.SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.UserService.SearchUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[user.ListUsersRequest]) (*connect.Response[user.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.UserService.ListUsers is not implemented"))
}

// SubscriptionServiceClient is a client for the server_alpha.user.v1.SubscriptionService service.
type SubscriptionServiceClient interface {
	ListSubscriptions(context.Context, *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error)
	CreateSubscription(context.Context, *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error)
}

// NewSubscriptionServiceClient constructs a client for the server_alpha.user.v1.SubscriptionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &subscriptionServiceClient{
		listSubscriptions: connect.NewClient[user.ListSubscriptionsRequest, user.ListSubscriptionsResponse](
			httpClient,
			baseURL+SubscriptionServiceListSubscriptionsProcedure,
			connect.WithSchema(subscriptionServiceListSubscriptionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSubscription: connect.NewClient[user.CreateSubscriptionRequest, user.CreateSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceCreateSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceCreateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSubscription: connect.NewClient[user.DeleteSubscriptionRequest, user.DeleteSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceDeleteSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceDeleteSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriptionServiceClient implements SubscriptionServiceClient.
type subscriptionServiceClient struct {
	listSubscriptions  *connect.Client[user.ListSubscriptionsRequest, user.ListSubscriptionsResponse]
	createSubscription *connect.Client[user.CreateSubscriptionRequest, user.CreateSubscriptionResponse]
	deleteSubscription *connect.Client[user.DeleteSubscriptionRequest, user.DeleteSubscriptionResponse]
}

// ListSubscriptions calls server_alpha.user.v1.SubscriptionService.ListSubscriptions.
func (c *subscriptionServiceClient) ListSubscriptions(ctx context.Context, req *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// CreateSubscription calls server_alpha.user.v1.SubscriptionService.CreateSubscription.
func (c *subscriptionServiceClient) CreateSubscription(ctx context.Context, req *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error) {
	return c.createSubscription.CallUnary(ctx, req)
}

// DeleteSubscription calls server_alpha.user.v1.SubscriptionService.DeleteSubscription.
func (c *subscriptionServiceClient) DeleteSubscription(ctx context.Context, req *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error) {
	return c.deleteSubscription.CallUnary(ctx, req)
}

// SubscriptionServiceHandler is an implementation of the server_alpha.user.v1.SubscriptionService
// service.
type SubscriptionServiceHandler interface {
	ListSubscriptions(context.Context, *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error)
	CreateSubscription(context.Context, *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error)
}

// NewSubscriptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionServiceHandler(svc SubscriptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriptionServiceListSubscriptionsHandler := connect.NewUnaryHandler(
		SubscriptionServiceListSubscriptionsProcedure,
		svc.ListSubscriptions,
		connect.WithSchema(subscriptionServiceListSubscriptionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceCreateSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceCreateSubscriptionProcedure,
		svc.CreateSubscription,
		connect.WithSchema(subscriptionServiceCreateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceDeleteSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceDeleteSubscriptionProcedure,
		svc.DeleteSubscription,
		connect.WithSchema(subscriptionServiceDeleteSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.user.v1.SubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionServiceListSubscriptionsProcedure:
			subscriptionServiceListSubscriptionsHandler.ServeHTTP(w, r)
		case SubscriptionServiceCreateSubscriptionProcedure:
			subscriptionServiceCreateSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceDeleteSubscriptionProcedure:
			subscriptionServiceDeleteSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionServiceHandler struct{}

func (UnimplementedSubscriptionServiceHandler) ListSubscriptions(context.Context, *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.SubscriptionService.ListSubscriptions is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) CreateSubscription(context.Context, *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.SubscriptionService.CreateSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) DeleteSubscription(context.Context, *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.v1.SubscriptionService.DeleteSubscription is not implemented"))
}
