// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/user/subscription.proto

package userconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/user"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubscriptionServiceName is the fully-qualified name of the SubscriptionService service.
	SubscriptionServiceName = "server_alpha.user.SubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriptionServiceListSubscriptionsProcedure is the fully-qualified name of the
	// SubscriptionService's ListSubscriptions RPC.
	SubscriptionServiceListSubscriptionsProcedure = "/server_alpha.user.SubscriptionService/ListSubscriptions"
	// SubscriptionServiceCreateSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's CreateSubscription RPC.
	SubscriptionServiceCreateSubscriptionProcedure = "/server_alpha.user.SubscriptionService/CreateSubscription"
	// SubscriptionServiceDeleteSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's DeleteSubscription RPC.
	SubscriptionServiceDeleteSubscriptionProcedure = "/server_alpha.user.SubscriptionService/DeleteSubscription"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	subscriptionServiceServiceDescriptor                  = user.File_server_alpha_user_subscription_proto.Services().ByName("SubscriptionService")
	subscriptionServiceListSubscriptionsMethodDescriptor  = subscriptionServiceServiceDescriptor.Methods().ByName("ListSubscriptions")
	subscriptionServiceCreateSubscriptionMethodDescriptor = subscriptionServiceServiceDescriptor.Methods().ByName("CreateSubscription")
	subscriptionServiceDeleteSubscriptionMethodDescriptor = subscriptionServiceServiceDescriptor.Methods().ByName("DeleteSubscription")
)

// SubscriptionServiceClient is a client for the server_alpha.user.SubscriptionService service.
type SubscriptionServiceClient interface {
	ListSubscriptions(context.Context, *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error)
	CreateSubscription(context.Context, *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error)
}

// NewSubscriptionServiceClient constructs a client for the server_alpha.user.SubscriptionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &subscriptionServiceClient{
		listSubscriptions: connect.NewClient[user.ListSubscriptionsRequest, user.ListSubscriptionsResponse](
			httpClient,
			baseURL+SubscriptionServiceListSubscriptionsProcedure,
			connect.WithSchema(subscriptionServiceListSubscriptionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSubscription: connect.NewClient[user.CreateSubscriptionRequest, user.CreateSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceCreateSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceCreateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSubscription: connect.NewClient[user.DeleteSubscriptionRequest, user.DeleteSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceDeleteSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceDeleteSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriptionServiceClient implements SubscriptionServiceClient.
type subscriptionServiceClient struct {
	listSubscriptions  *connect.Client[user.ListSubscriptionsRequest, user.ListSubscriptionsResponse]
	createSubscription *connect.Client[user.CreateSubscriptionRequest, user.CreateSubscriptionResponse]
	deleteSubscription *connect.Client[user.DeleteSubscriptionRequest, user.DeleteSubscriptionResponse]
}

// ListSubscriptions calls server_alpha.user.SubscriptionService.ListSubscriptions.
func (c *subscriptionServiceClient) ListSubscriptions(ctx context.Context, req *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// CreateSubscription calls server_alpha.user.SubscriptionService.CreateSubscription.
func (c *subscriptionServiceClient) CreateSubscription(ctx context.Context, req *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error) {
	return c.createSubscription.CallUnary(ctx, req)
}

// DeleteSubscription calls server_alpha.user.SubscriptionService.DeleteSubscription.
func (c *subscriptionServiceClient) DeleteSubscription(ctx context.Context, req *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error) {
	return c.deleteSubscription.CallUnary(ctx, req)
}

// SubscriptionServiceHandler is an implementation of the server_alpha.user.SubscriptionService
// service.
type SubscriptionServiceHandler interface {
	ListSubscriptions(context.Context, *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error)
	CreateSubscription(context.Context, *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error)
}

// NewSubscriptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionServiceHandler(svc SubscriptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriptionServiceListSubscriptionsHandler := connect.NewUnaryHandler(
		SubscriptionServiceListSubscriptionsProcedure,
		svc.ListSubscriptions,
		connect.WithSchema(subscriptionServiceListSubscriptionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceCreateSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceCreateSubscriptionProcedure,
		svc.CreateSubscription,
		connect.WithSchema(subscriptionServiceCreateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceDeleteSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceDeleteSubscriptionProcedure,
		svc.DeleteSubscription,
		connect.WithSchema(subscriptionServiceDeleteSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.user.SubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionServiceListSubscriptionsProcedure:
			subscriptionServiceListSubscriptionsHandler.ServeHTTP(w, r)
		case SubscriptionServiceCreateSubscriptionProcedure:
			subscriptionServiceCreateSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceDeleteSubscriptionProcedure:
			subscriptionServiceDeleteSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionServiceHandler struct{}

func (UnimplementedSubscriptionServiceHandler) ListSubscriptions(context.Context, *connect.Request[user.ListSubscriptionsRequest]) (*connect.Response[user.ListSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.SubscriptionService.ListSubscriptions is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) CreateSubscription(context.Context, *connect.Request[user.CreateSubscriptionRequest]) (*connect.Response[user.CreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.SubscriptionService.CreateSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) DeleteSubscription(context.Context, *connect.Request[user.DeleteSubscriptionRequest]) (*connect.Response[user.DeleteSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.user.SubscriptionService.DeleteSubscription is not implemented"))
}
