// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/chat/chat.proto

package chatconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	chat "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/chat"
	common "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/common"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "server_alpha.chat.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceCreateChatProcedure is the fully-qualified name of the ChatService's CreateChat RPC.
	ChatServiceCreateChatProcedure = "/server_alpha.chat.ChatService/CreateChat"
	// ChatServiceGetChatProcedure is the fully-qualified name of the ChatService's GetChat RPC.
	ChatServiceGetChatProcedure = "/server_alpha.chat.ChatService/GetChat"
	// ChatServiceListChatsProcedure is the fully-qualified name of the ChatService's ListChats RPC.
	ChatServiceListChatsProcedure = "/server_alpha.chat.ChatService/ListChats"
	// ChatServicePrepareChatStreamProcedure is the fully-qualified name of the ChatService's
	// PrepareChatStream RPC.
	ChatServicePrepareChatStreamProcedure = "/server_alpha.chat.ChatService/PrepareChatStream"
	// ChatServiceChatStreamProcedure is the fully-qualified name of the ChatService's ChatStream RPC.
	ChatServiceChatStreamProcedure = "/server_alpha.chat.ChatService/ChatStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chatServiceServiceDescriptor                 = chat.File_server_alpha_chat_chat_proto.Services().ByName("ChatService")
	chatServiceCreateChatMethodDescriptor        = chatServiceServiceDescriptor.Methods().ByName("CreateChat")
	chatServiceGetChatMethodDescriptor           = chatServiceServiceDescriptor.Methods().ByName("GetChat")
	chatServiceListChatsMethodDescriptor         = chatServiceServiceDescriptor.Methods().ByName("ListChats")
	chatServicePrepareChatStreamMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("PrepareChatStream")
	chatServiceChatStreamMethodDescriptor        = chatServiceServiceDescriptor.Methods().ByName("ChatStream")
)

// ChatServiceClient is a client for the server_alpha.chat.ChatService service.
type ChatServiceClient interface {
	CreateChat(context.Context, *connect.Request[chat.CreateChatRequest]) (*connect.Response[chat.CreateChatResponse], error)
	GetChat(context.Context, *connect.Request[chat.GetChatRequest]) (*connect.Response[chat.GetChatResponse], error)
	ListChats(context.Context, *connect.Request[common.Empty]) (*connect.Response[chat.ListChatsResponse], error)
	PrepareChatStream(context.Context, *connect.Request[chat.PrepareChatStreamRequest]) (*connect.Response[common.Empty], error)
	ChatStream(context.Context) *connect.BidiStreamForClient[chat.ChatMessage, chat.ChatMessage]
}

// NewChatServiceClient constructs a client for the server_alpha.chat.ChatService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		createChat: connect.NewClient[chat.CreateChatRequest, chat.CreateChatResponse](
			httpClient,
			baseURL+ChatServiceCreateChatProcedure,
			connect.WithSchema(chatServiceCreateChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChat: connect.NewClient[chat.GetChatRequest, chat.GetChatResponse](
			httpClient,
			baseURL+ChatServiceGetChatProcedure,
			connect.WithSchema(chatServiceGetChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listChats: connect.NewClient[common.Empty, chat.ListChatsResponse](
			httpClient,
			baseURL+ChatServiceListChatsProcedure,
			connect.WithSchema(chatServiceListChatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		prepareChatStream: connect.NewClient[chat.PrepareChatStreamRequest, common.Empty](
			httpClient,
			baseURL+ChatServicePrepareChatStreamProcedure,
			connect.WithSchema(chatServicePrepareChatStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		chatStream: connect.NewClient[chat.ChatMessage, chat.ChatMessage](
			httpClient,
			baseURL+ChatServiceChatStreamProcedure,
			connect.WithSchema(chatServiceChatStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	createChat        *connect.Client[chat.CreateChatRequest, chat.CreateChatResponse]
	getChat           *connect.Client[chat.GetChatRequest, chat.GetChatResponse]
	listChats         *connect.Client[common.Empty, chat.ListChatsResponse]
	prepareChatStream *connect.Client[chat.PrepareChatStreamRequest, common.Empty]
	chatStream        *connect.Client[chat.ChatMessage, chat.ChatMessage]
}

// CreateChat calls server_alpha.chat.ChatService.CreateChat.
func (c *chatServiceClient) CreateChat(ctx context.Context, req *connect.Request[chat.CreateChatRequest]) (*connect.Response[chat.CreateChatResponse], error) {
	return c.createChat.CallUnary(ctx, req)
}

// GetChat calls server_alpha.chat.ChatService.GetChat.
func (c *chatServiceClient) GetChat(ctx context.Context, req *connect.Request[chat.GetChatRequest]) (*connect.Response[chat.GetChatResponse], error) {
	return c.getChat.CallUnary(ctx, req)
}

// ListChats calls server_alpha.chat.ChatService.ListChats.
func (c *chatServiceClient) ListChats(ctx context.Context, req *connect.Request[common.Empty]) (*connect.Response[chat.ListChatsResponse], error) {
	return c.listChats.CallUnary(ctx, req)
}

// PrepareChatStream calls server_alpha.chat.ChatService.PrepareChatStream.
func (c *chatServiceClient) PrepareChatStream(ctx context.Context, req *connect.Request[chat.PrepareChatStreamRequest]) (*connect.Response[common.Empty], error) {
	return c.prepareChatStream.CallUnary(ctx, req)
}

// ChatStream calls server_alpha.chat.ChatService.ChatStream.
func (c *chatServiceClient) ChatStream(ctx context.Context) *connect.BidiStreamForClient[chat.ChatMessage, chat.ChatMessage] {
	return c.chatStream.CallBidiStream(ctx)
}

// ChatServiceHandler is an implementation of the server_alpha.chat.ChatService service.
type ChatServiceHandler interface {
	CreateChat(context.Context, *connect.Request[chat.CreateChatRequest]) (*connect.Response[chat.CreateChatResponse], error)
	GetChat(context.Context, *connect.Request[chat.GetChatRequest]) (*connect.Response[chat.GetChatResponse], error)
	ListChats(context.Context, *connect.Request[common.Empty]) (*connect.Response[chat.ListChatsResponse], error)
	PrepareChatStream(context.Context, *connect.Request[chat.PrepareChatStreamRequest]) (*connect.Response[common.Empty], error)
	ChatStream(context.Context, *connect.BidiStream[chat.ChatMessage, chat.ChatMessage]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceCreateChatHandler := connect.NewUnaryHandler(
		ChatServiceCreateChatProcedure,
		svc.CreateChat,
		connect.WithSchema(chatServiceCreateChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetChatHandler := connect.NewUnaryHandler(
		ChatServiceGetChatProcedure,
		svc.GetChat,
		connect.WithSchema(chatServiceGetChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceListChatsHandler := connect.NewUnaryHandler(
		ChatServiceListChatsProcedure,
		svc.ListChats,
		connect.WithSchema(chatServiceListChatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServicePrepareChatStreamHandler := connect.NewUnaryHandler(
		ChatServicePrepareChatStreamProcedure,
		svc.PrepareChatStream,
		connect.WithSchema(chatServicePrepareChatStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceChatStreamHandler := connect.NewBidiStreamHandler(
		ChatServiceChatStreamProcedure,
		svc.ChatStream,
		connect.WithSchema(chatServiceChatStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.chat.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceCreateChatProcedure:
			chatServiceCreateChatHandler.ServeHTTP(w, r)
		case ChatServiceGetChatProcedure:
			chatServiceGetChatHandler.ServeHTTP(w, r)
		case ChatServiceListChatsProcedure:
			chatServiceListChatsHandler.ServeHTTP(w, r)
		case ChatServicePrepareChatStreamProcedure:
			chatServicePrepareChatStreamHandler.ServeHTTP(w, r)
		case ChatServiceChatStreamProcedure:
			chatServiceChatStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) CreateChat(context.Context, *connect.Request[chat.CreateChatRequest]) (*connect.Response[chat.CreateChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.chat.ChatService.CreateChat is not implemented"))
}

func (UnimplementedChatServiceHandler) GetChat(context.Context, *connect.Request[chat.GetChatRequest]) (*connect.Response[chat.GetChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.chat.ChatService.GetChat is not implemented"))
}

func (UnimplementedChatServiceHandler) ListChats(context.Context, *connect.Request[common.Empty]) (*connect.Response[chat.ListChatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.chat.ChatService.ListChats is not implemented"))
}

func (UnimplementedChatServiceHandler) PrepareChatStream(context.Context, *connect.Request[chat.PrepareChatStreamRequest]) (*connect.Response[common.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.chat.ChatService.PrepareChatStream is not implemented"))
}

func (UnimplementedChatServiceHandler) ChatStream(context.Context, *connect.BidiStream[chat.ChatMessage, chat.ChatMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.chat.ChatService.ChatStream is not implemented"))
}
