// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/mail/v1/mail.proto

package mailv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/mail/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MailServiceName is the fully-qualified name of the MailService service.
	MailServiceName = "server_alpha.mail.v1.MailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MailServiceSendTokenMailProcedure is the fully-qualified name of the MailService's SendTokenMail
	// RPC.
	MailServiceSendTokenMailProcedure = "/server_alpha.mail.v1.MailService/SendTokenMail"
	// MailServiceSendConfirmationMailProcedure is the fully-qualified name of the MailService's
	// SendConfirmationMail RPC.
	MailServiceSendConfirmationMailProcedure = "/server_alpha.mail.v1.MailService/SendConfirmationMail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mailServiceServiceDescriptor                    = v1.File_server_alpha_mail_v1_mail_proto.Services().ByName("MailService")
	mailServiceSendTokenMailMethodDescriptor        = mailServiceServiceDescriptor.Methods().ByName("SendTokenMail")
	mailServiceSendConfirmationMailMethodDescriptor = mailServiceServiceDescriptor.Methods().ByName("SendConfirmationMail")
)

// MailServiceClient is a client for the server_alpha.mail.v1.MailService service.
type MailServiceClient interface {
	SendTokenMail(context.Context, *connect.Request[v1.SendTokenMailRequest]) (*connect.Response[v1.SendTokenMailResponse], error)
	SendConfirmationMail(context.Context, *connect.Request[v1.SendConfirmationMailRequest]) (*connect.Response[v1.SendConfirmationMailResponse], error)
}

// NewMailServiceClient constructs a client for the server_alpha.mail.v1.MailService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMailServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mailServiceClient{
		sendTokenMail: connect.NewClient[v1.SendTokenMailRequest, v1.SendTokenMailResponse](
			httpClient,
			baseURL+MailServiceSendTokenMailProcedure,
			connect.WithSchema(mailServiceSendTokenMailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendConfirmationMail: connect.NewClient[v1.SendConfirmationMailRequest, v1.SendConfirmationMailResponse](
			httpClient,
			baseURL+MailServiceSendConfirmationMailProcedure,
			connect.WithSchema(mailServiceSendConfirmationMailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mailServiceClient implements MailServiceClient.
type mailServiceClient struct {
	sendTokenMail        *connect.Client[v1.SendTokenMailRequest, v1.SendTokenMailResponse]
	sendConfirmationMail *connect.Client[v1.SendConfirmationMailRequest, v1.SendConfirmationMailResponse]
}

// SendTokenMail calls server_alpha.mail.v1.MailService.SendTokenMail.
func (c *mailServiceClient) SendTokenMail(ctx context.Context, req *connect.Request[v1.SendTokenMailRequest]) (*connect.Response[v1.SendTokenMailResponse], error) {
	return c.sendTokenMail.CallUnary(ctx, req)
}

// SendConfirmationMail calls server_alpha.mail.v1.MailService.SendConfirmationMail.
func (c *mailServiceClient) SendConfirmationMail(ctx context.Context, req *connect.Request[v1.SendConfirmationMailRequest]) (*connect.Response[v1.SendConfirmationMailResponse], error) {
	return c.sendConfirmationMail.CallUnary(ctx, req)
}

// MailServiceHandler is an implementation of the server_alpha.mail.v1.MailService service.
type MailServiceHandler interface {
	SendTokenMail(context.Context, *connect.Request[v1.SendTokenMailRequest]) (*connect.Response[v1.SendTokenMailResponse], error)
	SendConfirmationMail(context.Context, *connect.Request[v1.SendConfirmationMailRequest]) (*connect.Response[v1.SendConfirmationMailResponse], error)
}

// NewMailServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMailServiceHandler(svc MailServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mailServiceSendTokenMailHandler := connect.NewUnaryHandler(
		MailServiceSendTokenMailProcedure,
		svc.SendTokenMail,
		connect.WithSchema(mailServiceSendTokenMailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mailServiceSendConfirmationMailHandler := connect.NewUnaryHandler(
		MailServiceSendConfirmationMailProcedure,
		svc.SendConfirmationMail,
		connect.WithSchema(mailServiceSendConfirmationMailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.mail.v1.MailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MailServiceSendTokenMailProcedure:
			mailServiceSendTokenMailHandler.ServeHTTP(w, r)
		case MailServiceSendConfirmationMailProcedure:
			mailServiceSendConfirmationMailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMailServiceHandler struct{}

func (UnimplementedMailServiceHandler) SendTokenMail(context.Context, *connect.Request[v1.SendTokenMailRequest]) (*connect.Response[v1.SendTokenMailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.mail.v1.MailService.SendTokenMail is not implemented"))
}

func (UnimplementedMailServiceHandler) SendConfirmationMail(context.Context, *connect.Request[v1.SendConfirmationMailRequest]) (*connect.Response[v1.SendConfirmationMailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.mail.v1.MailService.SendConfirmationMail is not implemented"))
}
