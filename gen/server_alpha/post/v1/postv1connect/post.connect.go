// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_alpha/post/v1/post.proto

package postv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wwi21seb-projekt/alpha-shared/gen/server_alpha/post/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "server_alpha.post.v1.PostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostServiceListPostsProcedure is the fully-qualified name of the PostService's ListPosts RPC.
	PostServiceListPostsProcedure = "/server_alpha.post.v1.PostService/ListPosts"
	// PostServiceGetPostProcedure is the fully-qualified name of the PostService's GetPost RPC.
	PostServiceGetPostProcedure = "/server_alpha.post.v1.PostService/GetPost"
	// PostServiceCreatePostProcedure is the fully-qualified name of the PostService's CreatePost RPC.
	PostServiceCreatePostProcedure = "/server_alpha.post.v1.PostService/CreatePost"
	// PostServiceDeletePostProcedure is the fully-qualified name of the PostService's DeletePost RPC.
	PostServiceDeletePostProcedure = "/server_alpha.post.v1.PostService/DeletePost"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	postServiceServiceDescriptor          = v1.File_server_alpha_post_v1_post_proto.Services().ByName("PostService")
	postServiceListPostsMethodDescriptor  = postServiceServiceDescriptor.Methods().ByName("ListPosts")
	postServiceGetPostMethodDescriptor    = postServiceServiceDescriptor.Methods().ByName("GetPost")
	postServiceCreatePostMethodDescriptor = postServiceServiceDescriptor.Methods().ByName("CreatePost")
	postServiceDeletePostMethodDescriptor = postServiceServiceDescriptor.Methods().ByName("DeletePost")
)

// PostServiceClient is a client for the server_alpha.post.v1.PostService service.
type PostServiceClient interface {
	ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error)
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
}

// NewPostServiceClient constructs a client for the server_alpha.post.v1.PostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postServiceClient{
		listPosts: connect.NewClient[v1.ListPostsRequest, v1.ListPostsResponse](
			httpClient,
			baseURL+PostServiceListPostsProcedure,
			connect.WithSchema(postServiceListPostsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPost: connect.NewClient[v1.GetPostRequest, v1.GetPostResponse](
			httpClient,
			baseURL+PostServiceGetPostProcedure,
			connect.WithSchema(postServiceGetPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+PostServiceCreatePostProcedure,
			connect.WithSchema(postServiceCreatePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePost: connect.NewClient[v1.DeletePostRequest, v1.DeletePostResponse](
			httpClient,
			baseURL+PostServiceDeletePostProcedure,
			connect.WithSchema(postServiceDeletePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	listPosts  *connect.Client[v1.ListPostsRequest, v1.ListPostsResponse]
	getPost    *connect.Client[v1.GetPostRequest, v1.GetPostResponse]
	createPost *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	deletePost *connect.Client[v1.DeletePostRequest, v1.DeletePostResponse]
}

// ListPosts calls server_alpha.post.v1.PostService.ListPosts.
func (c *postServiceClient) ListPosts(ctx context.Context, req *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error) {
	return c.listPosts.CallUnary(ctx, req)
}

// GetPost calls server_alpha.post.v1.PostService.GetPost.
func (c *postServiceClient) GetPost(ctx context.Context, req *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return c.getPost.CallUnary(ctx, req)
}

// CreatePost calls server_alpha.post.v1.PostService.CreatePost.
func (c *postServiceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// DeletePost calls server_alpha.post.v1.PostService.DeletePost.
func (c *postServiceClient) DeletePost(ctx context.Context, req *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return c.deletePost.CallUnary(ctx, req)
}

// PostServiceHandler is an implementation of the server_alpha.post.v1.PostService service.
type PostServiceHandler interface {
	ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error)
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	postServiceListPostsHandler := connect.NewUnaryHandler(
		PostServiceListPostsProcedure,
		svc.ListPosts,
		connect.WithSchema(postServiceListPostsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	postServiceGetPostHandler := connect.NewUnaryHandler(
		PostServiceGetPostProcedure,
		svc.GetPost,
		connect.WithSchema(postServiceGetPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	postServiceCreatePostHandler := connect.NewUnaryHandler(
		PostServiceCreatePostProcedure,
		svc.CreatePost,
		connect.WithSchema(postServiceCreatePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	postServiceDeletePostHandler := connect.NewUnaryHandler(
		PostServiceDeletePostProcedure,
		svc.DeletePost,
		connect.WithSchema(postServiceDeletePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server_alpha.post.v1.PostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostServiceListPostsProcedure:
			postServiceListPostsHandler.ServeHTTP(w, r)
		case PostServiceGetPostProcedure:
			postServiceGetPostHandler.ServeHTTP(w, r)
		case PostServiceCreatePostProcedure:
			postServiceCreatePostHandler.ServeHTTP(w, r)
		case PostServiceDeletePostProcedure:
			postServiceDeletePostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.post.v1.PostService.ListPosts is not implemented"))
}

func (UnimplementedPostServiceHandler) GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.post.v1.PostService.GetPost is not implemented"))
}

func (UnimplementedPostServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.post.v1.PostService.CreatePost is not implemented"))
}

func (UnimplementedPostServiceHandler) DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server_alpha.post.v1.PostService.DeletePost is not implemented"))
}
