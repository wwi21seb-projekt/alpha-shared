// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notification/notfication.proto

package notificationconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	common "github.com/wwi21seb-projekt/alpha-shared/gen/common"
	notification "github.com/wwi21seb-projekt/alpha-shared/gen/notification"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PushServiceName is the fully-qualified name of the PushService service.
	PushServiceName = "serveralpha.notification.PushService"
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "serveralpha.notification.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PushServiceGetPublicKeyProcedure is the fully-qualified name of the PushService's GetPublicKey
	// RPC.
	PushServiceGetPublicKeyProcedure = "/serveralpha.notification.PushService/GetPublicKey"
	// PushServiceCreatePushSubscriptionProcedure is the fully-qualified name of the PushService's
	// CreatePushSubscription RPC.
	PushServiceCreatePushSubscriptionProcedure = "/serveralpha.notification.PushService/CreatePushSubscription"
	// NotificationServiceGetNotificationsProcedure is the fully-qualified name of the
	// NotificationService's GetNotifications RPC.
	NotificationServiceGetNotificationsProcedure = "/serveralpha.notification.NotificationService/GetNotifications"
	// NotificationServiceDeleteNotificationProcedure is the fully-qualified name of the
	// NotificationService's DeleteNotification RPC.
	NotificationServiceDeleteNotificationProcedure = "/serveralpha.notification.NotificationService/DeleteNotification"
	// NotificationServiceSendNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendNotification RPC.
	NotificationServiceSendNotificationProcedure = "/serveralpha.notification.NotificationService/SendNotification"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pushServiceServiceDescriptor                          = notification.File_notification_notfication_service_proto.Services().ByName("PushService")
	pushServiceGetPublicKeyMethodDescriptor               = pushServiceServiceDescriptor.Methods().ByName("GetPublicKey")
	pushServiceCreatePushSubscriptionMethodDescriptor     = pushServiceServiceDescriptor.Methods().ByName("CreatePushSubscription")
	notificationServiceServiceDescriptor                  = notification.File_notification_notfication_service_proto.Services().ByName("NotificationService")
	notificationServiceGetNotificationsMethodDescriptor   = notificationServiceServiceDescriptor.Methods().ByName("GetNotifications")
	notificationServiceDeleteNotificationMethodDescriptor = notificationServiceServiceDescriptor.Methods().ByName("DeleteNotification")
	notificationServiceSendNotificationMethodDescriptor   = notificationServiceServiceDescriptor.Methods().ByName("SendNotification")
)

// PushServiceClient is a client for the serveralpha.notification.PushService service.
type PushServiceClient interface {
	GetPublicKey(context.Context, *connect.Request[common.Empty]) (*connect.Response[notification.PublicKeyResponse], error)
	CreatePushSubscription(context.Context, *connect.Request[notification.CreatePushSubscriptionRequest]) (*connect.Response[notification.CreatePushSubscriptionResponse], error)
}

// NewPushServiceClient constructs a client for the serveralpha.notification.PushService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPushServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PushServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pushServiceClient{
		getPublicKey: connect.NewClient[common.Empty, notification.PublicKeyResponse](
			httpClient,
			baseURL+PushServiceGetPublicKeyProcedure,
			connect.WithSchema(pushServiceGetPublicKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPushSubscription: connect.NewClient[notification.CreatePushSubscriptionRequest, notification.CreatePushSubscriptionResponse](
			httpClient,
			baseURL+PushServiceCreatePushSubscriptionProcedure,
			connect.WithSchema(pushServiceCreatePushSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pushServiceClient implements PushServiceClient.
type pushServiceClient struct {
	getPublicKey           *connect.Client[common.Empty, notification.PublicKeyResponse]
	createPushSubscription *connect.Client[notification.CreatePushSubscriptionRequest, notification.CreatePushSubscriptionResponse]
}

// GetPublicKey calls serveralpha.notification.PushService.GetPublicKey.
func (c *pushServiceClient) GetPublicKey(ctx context.Context, req *connect.Request[common.Empty]) (*connect.Response[notification.PublicKeyResponse], error) {
	return c.getPublicKey.CallUnary(ctx, req)
}

// CreatePushSubscription calls serveralpha.notification.PushService.CreatePushSubscription.
func (c *pushServiceClient) CreatePushSubscription(ctx context.Context, req *connect.Request[notification.CreatePushSubscriptionRequest]) (*connect.Response[notification.CreatePushSubscriptionResponse], error) {
	return c.createPushSubscription.CallUnary(ctx, req)
}

// PushServiceHandler is an implementation of the serveralpha.notification.PushService service.
type PushServiceHandler interface {
	GetPublicKey(context.Context, *connect.Request[common.Empty]) (*connect.Response[notification.PublicKeyResponse], error)
	CreatePushSubscription(context.Context, *connect.Request[notification.CreatePushSubscriptionRequest]) (*connect.Response[notification.CreatePushSubscriptionResponse], error)
}

// NewPushServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPushServiceHandler(svc PushServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pushServiceGetPublicKeyHandler := connect.NewUnaryHandler(
		PushServiceGetPublicKeyProcedure,
		svc.GetPublicKey,
		connect.WithSchema(pushServiceGetPublicKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pushServiceCreatePushSubscriptionHandler := connect.NewUnaryHandler(
		PushServiceCreatePushSubscriptionProcedure,
		svc.CreatePushSubscription,
		connect.WithSchema(pushServiceCreatePushSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/serveralpha.notification.PushService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PushServiceGetPublicKeyProcedure:
			pushServiceGetPublicKeyHandler.ServeHTTP(w, r)
		case PushServiceCreatePushSubscriptionProcedure:
			pushServiceCreatePushSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPushServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPushServiceHandler struct{}

func (UnimplementedPushServiceHandler) GetPublicKey(context.Context, *connect.Request[common.Empty]) (*connect.Response[notification.PublicKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serveralpha.notification.PushService.GetPublicKey is not implemented"))
}

func (UnimplementedPushServiceHandler) CreatePushSubscription(context.Context, *connect.Request[notification.CreatePushSubscriptionRequest]) (*connect.Response[notification.CreatePushSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serveralpha.notification.PushService.CreatePushSubscription is not implemented"))
}

// NotificationServiceClient is a client for the serveralpha.notification.NotificationService
// service.
type NotificationServiceClient interface {
	GetNotifications(context.Context, *connect.Request[common.Empty]) (*connect.Response[notification.GetNotificationsResponse], error)
	DeleteNotification(context.Context, *connect.Request[notification.DeleteNotificationRequest]) (*connect.Response[common.Empty], error)
	SendNotification(context.Context, *connect.Request[notification.SendNotificationRequest]) (*connect.Response[common.Empty], error)
}

// NewNotificationServiceClient constructs a client for the
// serveralpha.notification.NotificationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		getNotifications: connect.NewClient[common.Empty, notification.GetNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationsProcedure,
			connect.WithSchema(notificationServiceGetNotificationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNotification: connect.NewClient[notification.DeleteNotificationRequest, common.Empty](
			httpClient,
			baseURL+NotificationServiceDeleteNotificationProcedure,
			connect.WithSchema(notificationServiceDeleteNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendNotification: connect.NewClient[notification.SendNotificationRequest, common.Empty](
			httpClient,
			baseURL+NotificationServiceSendNotificationProcedure,
			connect.WithSchema(notificationServiceSendNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	getNotifications   *connect.Client[common.Empty, notification.GetNotificationsResponse]
	deleteNotification *connect.Client[notification.DeleteNotificationRequest, common.Empty]
	sendNotification   *connect.Client[notification.SendNotificationRequest, common.Empty]
}

// GetNotifications calls serveralpha.notification.NotificationService.GetNotifications.
func (c *notificationServiceClient) GetNotifications(ctx context.Context, req *connect.Request[common.Empty]) (*connect.Response[notification.GetNotificationsResponse], error) {
	return c.getNotifications.CallUnary(ctx, req)
}

// DeleteNotification calls serveralpha.notification.NotificationService.DeleteNotification.
func (c *notificationServiceClient) DeleteNotification(ctx context.Context, req *connect.Request[notification.DeleteNotificationRequest]) (*connect.Response[common.Empty], error) {
	return c.deleteNotification.CallUnary(ctx, req)
}

// SendNotification calls serveralpha.notification.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect.Request[notification.SendNotificationRequest]) (*connect.Response[common.Empty], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the
// serveralpha.notification.NotificationService service.
type NotificationServiceHandler interface {
	GetNotifications(context.Context, *connect.Request[common.Empty]) (*connect.Response[notification.GetNotificationsResponse], error)
	DeleteNotification(context.Context, *connect.Request[notification.DeleteNotificationRequest]) (*connect.Response[common.Empty], error)
	SendNotification(context.Context, *connect.Request[notification.SendNotificationRequest]) (*connect.Response[common.Empty], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceGetNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationsProcedure,
		svc.GetNotifications,
		connect.WithSchema(notificationServiceGetNotificationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceDeleteNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceDeleteNotificationProcedure,
		svc.DeleteNotification,
		connect.WithSchema(notificationServiceDeleteNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSendNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendNotificationProcedure,
		svc.SendNotification,
		connect.WithSchema(notificationServiceSendNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/serveralpha.notification.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceGetNotificationsProcedure:
			notificationServiceGetNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceDeleteNotificationProcedure:
			notificationServiceDeleteNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceSendNotificationProcedure:
			notificationServiceSendNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) GetNotifications(context.Context, *connect.Request[common.Empty]) (*connect.Response[notification.GetNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serveralpha.notification.NotificationService.GetNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) DeleteNotification(context.Context, *connect.Request[notification.DeleteNotificationRequest]) (*connect.Response[common.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serveralpha.notification.NotificationService.DeleteNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect.Request[notification.SendNotificationRequest]) (*connect.Response[common.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serveralpha.notification.NotificationService.SendNotification is not implemented"))
}
